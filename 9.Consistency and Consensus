If two nodes both believe that they are the leader, that situation is called split brain, and it often leads to data loss. 
Correct implementations of consensus help avoid such problems

There is some similarity between distributed consistency models and the hierarchy of transaction isolation levels. 
But while there is some overlap, they are mostly independent concerns: transaction isolation is primarily about avoiding race conditions due to concurrently executing transactions,
whereas distributed consistency is mostly about coordinating the state of replicas in the face of delays and faults.

Linearizability(also known as atomic consistency, strong consistency, immediate consistency, or external consistency)
the basic idea is to make a system appear as if there were only one copy of the data, and all operations on it are atomic. With this guarantee, even though there may be multiple replicas in reality, the application does not need to worry about them.

What Makes a System Linearizable?
In a linearizable system we imagine that there must be some point in time (between the start and end of the write operation) at which the value of x atomically flips from 0 to 1. Thus, if one client’s read returns the new value 1, all subsequent reads must also return the new value, even if the write operation has not yet completed.

Linearizability Versus Serializability
Serializability
Serializability is an isolation property of transactions, where every transaction may read and write multiple objects (rows, documents, records). 
It guarantees that transactions behave the same as if they had executed in some serial order (each transaction running to completion before the next transaction starts). 
It is okay for that serial order to be different from the order in which transactions were actually run.

Linearizability
Linearizability is a recency guarantee on reads and writes of a register (an individual object). 
It doesn’t group operations together into transactions, so it does not prevent problems such as write skew, unless you take additional measures such as materializing conflicts.

A database may provide both serializability and linearizability, and this combination is known as strict serializability or strong one-copy serializability. 
Implementations of serializability based on two-phase locking or actual serial execution are typically linearizable.
However, serializable snapshot isolation is not linearizable: 
by design, it makes reads from a consistent snapshot, to avoid lock contention between readers and writers. 
The whole point of a consistent snapshot is that it does not include writes that are more recent than the snapshot, and thus reads from the snapshot are not linearizable.

Relying on Linearizability
Locking and leader election
Locking and leader election
A system that uses single-leader replication needs to ensure that there is indeed only one leader, not several (split brain). 
One way of electing a leader is to use a lock: every node that starts up tries to acquire the lock, and the one that succeeds becomes the leader.
No matter how this lock is implemented, it must be linearizable: all nodes must agree which node owns the lock; otherwise it is useless.
Coordination services like Apache ZooKeeper and etcd are often used to implement distributed locks and leader election. 
They use consensus algorithms to implement linearizable operations in a fault-tolerant way.
There are still many subtle details to implementing locks and leader election correctly, and libraries like Apache Curator help by providing higher-level recipes on top of ZooKeeper. 
However, a linearizable storage service is the basic foundation for these coordination tasks.

Constraints and uniqueness guarantees
